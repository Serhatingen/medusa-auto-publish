import os
import whisper
import subprocess
from moviepy.editor import VideoFileClip, TextClip, CompositeVideoClip
from google.oauth2 import service_account
from googleapiclient.discovery import build
import yaml

# Load Whisper model once
MODEL = whisper.load_model("base")

def transcribe_with_timestamps(audio_path):
    # ← four spaces here under the def
    result = MODEL.transcribe(audio_path, word_timestamps=True)
    segments = result["segments"]
    # pick the longest segment (usually chorus)
    segments.sort(key=lambda s: s["end"] - s["start"], reverse=True)
    return segments[0]["start"], segments[0]["end"], result["text"]

def make_video_segment(audio_path, start, end, text, output_path):
    duration = end - start
    tmp_audio = output_path.replace('.mp4', '.wav')
    subprocess.run([
        "ffmpeg", "-y", "-i", audio_path,
        "-ss", str(start), "-t", str(duration),
        tmp_audio
    ])
    clip = VideoFileClip("blank_bg.mp4").subclip(0, duration)
    txt = TextClip(text,
                   fontsize=40,
                   font="Arial",
                   method="caption",
                   size=(clip.w * 0.8, None))
    txt = txt.set_position(("center", "bottom")).set_duration(duration)
    video = CompositeVideoClip([clip, txt])
    video = video.set_audio(clip.set_audio(tmp_audio).audio)
    video.write_videofile(output_path, fps=24)

def upload_clip_to_youtube(video_file):

file_name = os.path.basename(video_file)
title = f"Medusa Records Clip – {file_name}"
description = "Auto-generated by Medusa Records Bot"
tags = ["MedusaRecords", "MusicClip"]

  request_body = {
      'snippet': {
          'title': title,
          'description': description,
          'tags': tags,
          'categoryId': '10',
      },
      'status': {
          'privacyStatus': 'public',
      }
  }

  request = youtube.videos().insert(
      part="snippet,status",
      body=request_body,
      media_body=video_file
  )
  response = request.execute()
  print(f"Uploaded: https://youtu.be/{response['id']}")

def main():
os.makedirs(OUTPUT_VIDEO_DIR, exist_ok=True)
for file_name in os.listdir(INPUT_AUDIO_DIR):
if not file_name.lower().endswith(('.mp3', '.wav')):
continue

      audio_path = os.path.join(INPUT_AUDIO_DIR, file_name)
      start, end, text = transcribe_and_get_longest_segment(audio_path)

      base_name = os.path.splitext(file_name)[0]
      output_path = os.path.join(OUTPUT_VIDEO_DIR, f"{base_name}_clip.mp4")

      create_video_clip(audio_path, start, end, text, output_path)
      upload_clip_to_youtube(output_path)

if name == 'main':
main()
EOF
git add scripts/publish_clips.py
git commit -m "feat: add publish_clips script"
git push origin main
