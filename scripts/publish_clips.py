

#!/usr/bin/env python3
"""
Script to:
1. Transcribe audio files and find the longest segment (e.g., chorus).
2. Create a short lyric-overlay video clip for that segment.
3. Upload the clip to YouTube automatically.
"""

import os
import subprocess
import whisper
from moviepy.editor import VideoFileClip, TextClip, CompositeVideoClip
from google.oauth2 import service_account
from googleapiclient.discovery import build
import yaml

# -----------------------------
# Configuration
# -----------------------------
INPUT_AUDIO_DIR = 'songs'
OUTPUT_VIDEO_DIR = 'output'
BLANK_BG_VIDEO = 'blank_bg.mp4'
WHISPER_MODEL = 'base'

# Load Whisper model
model = whisper.load_model(WHISPER_MODEL)

# YouTube API setup
YOUTUBE_SCOPES = ["https://www.googleapis.com/auth/youtube.upload"]
service_account_info = yaml.safe_load(os.environ["YOUTUBE_SERVICE_ACCOUNT"])
credentials = service_account.Credentials.from_service_account_info(
    service_account_info, scopes=YOUTUBE_SCOPES
)
youtube = build('youtube', 'v3', credentials=credentials)


def transcribe_and_get_longest_segment(audio_path):
"""
Transcribe audio and return the start/end timestamps and full text
for the longest segment.
"""
result = model.transcribe(audio_path, word_timestamps=True)
segments = result.get('segments', [])
segments.sort(key=lambda s: s['end'] - s['start'], reverse=True)
longest = segments[0]
start = longest['start']
end = longest['end']
text = result.get('text', '').strip()
return start, end, text

def create_video_clip(audio_path, start, end, text, output_path):
"""
Extract audio segment, overlay lyrics on a blank background, and save video.
"""
duration = end - start
temp_audio = output_path.replace('.mp4', '.wav')

  subprocess.run([
      'ffmpeg', '-y', '-i', audio_path,
      '-ss', str(start), '-t', str(duration),
      temp_audio
  ], check=True)

  bg_clip = VideoFileClip(BLANK_BG_VIDEO).subclip(0, duration)

  text_clip = TextClip(
      text, fontsize=40, font='Arial', method='caption',
      size=(bg_clip.w * 0.8, None)
  ).set_position(('center', 'bottom')).set_duration(duration)

  video = CompositeVideoClip([bg_clip, text_clip])
  video = video.set_audio(video.audio.set_audio(temp_audio))
  video.write_videofile(output_path, fps=24)

def upload_clip_to_youtube(video_file):
"""
Upload a video file to the YouTube channel.
"""
file_name = os.path.basename(video_file)
title = f"Medusa Records Clip â€“ {file_name}"
description = "Auto-generated by Medusa Records Bot"
tags = ["MedusaRecords", "MusicClip"]

  request_body = {
      'snippet': {
          'title': title,
          'description': description,
          'tags': tags,
          'categoryId': '10',
      },
      'status': {
          'privacyStatus': 'public',
      }
  }

  request = youtube.videos().insert(
      part="snippet,status",
      body=request_body,
      media_body=video_file
  )
  response = request.execute()
  print(f"Uploaded: https://youtu.be/{response['id']}")

def main():
os.makedirs(OUTPUT_VIDEO_DIR, exist_ok=True)
for file_name in os.listdir(INPUT_AUDIO_DIR):
if not file_name.lower().endswith(('.mp3', '.wav')):
continue

      audio_path = os.path.join(INPUT_AUDIO_DIR, file_name)
      start, end, text = transcribe_and_get_longest_segment(audio_path)

      base_name = os.path.splitext(file_name)[0]
      output_path = os.path.join(OUTPUT_VIDEO_DIR, f"{base_name}_clip.mp4")

      create_video_clip(audio_path, start, end, text, output_path)
      upload_clip_to_youtube(output_path)

if name == 'main':
main()
EOF
git add scripts/publish_clips.py
git commit -m "feat: add publish_clips script"
git push origin main
